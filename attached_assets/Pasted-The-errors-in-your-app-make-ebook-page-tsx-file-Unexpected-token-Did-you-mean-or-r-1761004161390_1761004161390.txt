The errors in your `./app/make-ebook/page.tsx` file—**"Unexpected token. Did you mean `{'}'}` or `&rbrace;`?"** at line 1784 and **"Expected '</', got 'return'"** at line 1787—stem from a syntax issue in the JSX structure of the `MakeEbookPage` component. Specifically, the snippet shows a misplaced closing parenthesis `)` on line 1781 within the JSX, followed by multiple closing tags (`</div></main></div></div></div>`) on line 1782, and an incorrect component closure with a `}` on line 1784. This disrupts the JSX parsing, causing the parser to expect a closing tag (`</`) but encounter a `return` statement in the `MakeEbookPageWrapper` component.

### Cause of the Errors
- **Misplaced Parenthesis on Line 1781**: The `)}` in the JSX structure (inside the `div` containing the `RichTextEditor`) prematurely closes the `return` statement, leaving subsequent closing tags (`</div></main></div></div></div>`) outside the `return`. This causes the `Unexpected token }` error at line 1784, as the parser is still expecting JSX tags.
- **Unbalanced JSX Tags**: The multiple closing `div` and `main` tags on line 1782 suggest a mismatch with their opening tags. The `MakeEbookPage` component has several nested `div` elements, and the closing tags must align with their respective opening tags.
- **Impact on `MakeEbookPageWrapper`**: The malformed JSX in `MakeEbookPage` causes the parser to misinterpret the start of `MakeEbookPageWrapper`, leading to the `Expected '</', got 'return'` error at line 1787, where the `return` statement of `MakeEbookPageWrapper` begins.

### Solution
To fix the errors, you need to:
1. Move the `return` statement’s closing parenthesis `)` to after all JSX tags in `MakeEbookPage`, ensuring it wraps the entire JSX structure.
2. Balance the JSX tags by ensuring each opening tag (`<div>`, `<main>`) has a corresponding closing tag in the correct order.
3. Ensure the `MakeEbookPage` component’s function body is closed with a `}` after the `return` statement.
4. Preserve the `MakeEbookPageWrapper` component, which appears correct.

### Corrected Code
The issue is in the `MakeEbookPage` component’s JSX, specifically around the closing tags in the desktop editor section. Below is the corrected version of the problematic section, with the rest of the file unchanged. I’ve adjusted the JSX structure to ensure proper nesting and moved the `return` statement’s closing parenthesis to the correct position.

```tsx:disable-run
// app/make-ebook/page.tsx
"use client";

import React, { Suspense, useState, useRef, useLayoutEffect, useEffect, useCallback } from "react";
import { ProtectedRoute } from "@/components/auth/ProtectedRoute";
import { Header } from "@/components/Header";
import { useAuth } from "@/lib/hooks/useAuth";
import { BookToolbar } from "@/components/BookToolbar";
import { useSearchParams, useRouter } from "next/navigation";
import Link from "next/link";
import { PlusIcon, TrashIcon, LibraryIcon, CloseIcon, SaveIcon, DownloadIcon, BookIcon, PreviewIcon, LockIcon, MetadataIcon, MenuIcon, ChaptersIcon } from "./components/icons";
import { ChevronDown } from "lucide-react";
import Image from "next/image";
import DragIcon from "./components/icons/DragIcon";
import BinIcon from "./components/icons/BinIcon";
import { LANGUAGES, today } from "./utils/constants";
import { CHAPTER_TEMPLATES, Chapter, Endnote, EndnoteReference } from "./types";
import MetaTabContent from "./components/MetaTabContent";
import PreviewPanel from "./components/PreviewPanel";
import AiTabContent from "./components/AiTabContent";
import { useChapters } from "./hooks/useChapters";
import { useTags } from "./hooks/useTags";
import { useCover } from "./hooks/useCover";
import { useLockedSections } from "./hooks/useLockedSections";
import { exportEpub } from "./utils/exportEpub";
import RichTextEditor from "./components/RichTextEditor";
import { useCloudBooks } from "./hooks/useCloudBooks";
import { useAutosave } from "./hooks/useAutosave";

const HEADER_HEIGHT = 64; // px (adjust if your header is taller/shorter)
const BOOK_LIBRARY_KEY = "makeebook_library";

// Keep localStorage helper functions for migration
function saveBookToLibrary(book: any) {
  if (typeof window === "undefined") return;
  let library = loadBookLibrary();
  if (!library) library = [];
  const id = book.id || "book-" + Date.now();
  const bookToSave = {
    ...book,
    id,
    savedAt: Date.now(),
  };
  const idx = library.findIndex((b: any) => b.id === id);
  if (idx >= 0) library[idx] = bookToSave;
  else library.push(bookToSave);
  localStorage.setItem(BOOK_LIBRARY_KEY, JSON.stringify(library));
  return id;
}

function loadBookLibrary(): any[] {
  if (typeof window === "undefined") return [];
  const str = localStorage.getItem(BOOK_LIBRARY_KEY);
  if (str) {
    try {
      return JSON.parse(str);
    } catch (e) {}
  }
  return [];
}

function loadBookById(id: string) {
  const library = loadBookLibrary();
  return library.find((b) => b.id === id);
}

function removeBookFromLibrary(id: string) {
  let library = loadBookLibrary();
  library = library.filter((b) => b.id !== id);
  localStorage.setItem(BOOK_LIBRARY_KEY, JSON.stringify(library));
}

function plainText(html: string) {
  return html.replace(/<[^>]+>/g, " ").replace(/\s+/g, " ").trim();
}

function getContentChapterNumber(chapters: any[], currentIndex: number) {
  // Count only content chapters up to and including the current index
  let contentChapterCount = 0;
  for (let i = 0; i <= currentIndex; i++) {
    if (chapters[i]?.type === 'content') {
      contentChapterCount++;
    }
  }
  return contentChapterCount;
}

function ChapterCapsuleMarker({ markerStyle }: { markerStyle: { top: number; height: number } }) {
  return (
    <span
      className="absolute"
      style={{
        left: -18,
        top: (markerStyle.top ?? 0) + 12,
        width: 4,
        height: 24,
        backgroundColor: "#717274",
        borderRadius: 9999,
        transition: "top 0.3s cubic-bezier(0.4, 0, 0.2, 1)",
        zIndex: 1,
        display: "block",
      }}
      aria-hidden="true"
    />
  );
}

function HandleDragIcon({ isSelected }: { isSelected: boolean }) {
  return (
    <span
      className="relative w-4 h-5 shrink-0 flex items-center justify-center opacity-70 group-hover:opacity-100 transition"
      aria-hidden="true"
    >
      <DragIcon 
        className={`w-4 h-4 transition ${
          isSelected ? "brightness-0 invert" : "brightness-0"
        }`}
      />
    </span>
  );
}

function MakeEbookPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const { lockedSections, setLockedSections } = useLockedSections();
  const { coverFile, setCoverFile, handleCoverChange, coverUrl } = useCover();

  // Initialize cloud storage hooks
  const cloudBooks = useCloudBooks();

  const {
    chapters,
    setChapters,
    selectedChapter,
    setSelectedChapter,
    handleAddChapter,
    handleRemoveChapter,
    handleChapterTitleChange,
    handleChapterContentChange,
    handleDragStart,
    handleDragEnter,
    handleDragEnd,
    handleTouchStart,
    handleTouchMove,
    handleTouchEnd,
    isDragging,
    dragOverIndex,
    handleSelectChapter,
    ghostPillPosition,
    ghostPillContent,
    dragItemIndex,
  } = useChapters();

  const {
    tags, setTags, tagInput, setTagInput, handleAddTag, handleRemoveTag
  } = useTags();

  const [tab, setTab] = useState<"setup" | "ai" | "preview" | "library">("setup");
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null);
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState("");
  const [blurb, setBlurb] = useState("");
  const [publisher, setPublisher] = useState("");
  const [pubDate, setPubDate] = useState(today);
  const [isbn, setIsbn] = useState("");
  const [language, setLanguage] = useState(LANGUAGES[0]);
  const [genre, setGenre] = useState("");
  const [currentBookId, setCurrentBookId] = useState<string | undefined>(undefined);
  const [initialized, setInitialized] = useState(false);
  const [migrated, setMigrated] = useState(false);

  const [libraryOpen, setLibraryOpen] = useState(false);
  const [libraryBooks, setLibraryBooks] = useState<any[]>([]);
  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);
  const [showScrollIndicator, setShowScrollIndicator] = useState(false);
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const [newBookConfirmOpen, setNewBookConfirmOpen] = useState(false);
  const [chapterTypeDropdownOpen, setChapterTypeDropdownOpen] = useState(false);
  const [saveDialogOpen, setSaveDialogOpen] = useState(false);
  const [endnotes, setEndnotes] = useState<Endnote[]>([]);
  const [endnoteReferences, setEndnoteReferences] = useState<EndnoteReference[]>([]);
  const [nextEndnoteNumber, setNextEndnoteNumber] = useState(1);

  const [saveFeedback, setSaveFeedback] = useState(false);
  const [isLoadingBooks, setIsLoadingBooks] = useState(true);

  // Autosave function
  const handleAutosave = useCallback(async () => {
    if (!title && !author && chapters.length === 0) return;

    const bookData = {
      title,
      author,
      blurb,
      publisher,
      pubDate,
      isbn,
      language,
      genre,
      tags,
      coverUrl,
      chapters,
      endnotes,
      endnoteReferences,
    };

    const savedBook = await cloudBooks.saveBook(currentBookId, bookData);
    if (savedBook && !currentBookId) {
      setCurrentBookId(savedBook.id);
    }
  }, [title, author, blurb, publisher, pubDate, isbn, language, genre, tags, coverUrl, chapters, endnotes, endnoteReferences, currentBookId, cloudBooks]);

  // Initialize autosave hook
  const { saveStatus, markDirty, save: manualSave } = useAutosave({
    onSave: handleAutosave,
    debounceMs: 2000,
    enabled: true,
  });

  // Update endnotes chapter content whenever endnotes change
  useEffect(() => {
    updateEndnotesChapterContent();
  }, [endnotes]);

  // Handle back-navigation from endnotes to references
  useEffect(() => {
    function handleEndnoteBackClick(event: Event) {
      const target = event.target as HTMLElement;
      
      // Check if the clicked element or its parent has the endnote-back class
      const backLink = target.closest('.endnote-back') || 
                      (target.classList?.contains('endnote-back') ? target : null);
      
      if (backLink) {
        event.preventDefault();
        event.stopPropagation();
        
        const refNumber = backLink.getAttribute('data-back-to-ref');
        console.log('Back navigation clicked, refNumber:', refNumber);
        
        if (refNumber) {
          const refElement = document.getElementById(`ref${refNumber}`);
          console.log('Found ref element:', refElement);
          
          if (refElement) {
            refElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            // Add a brief highlight effect
            refElement.style.backgroundColor = '#ffeb3b';
            setTimeout(() => {
              refElement.style.backgroundColor = '';
            }, 1000);
          } else {
            console.warn(`Could not find reference element with ID: ref${refNumber}`);
          }
        }
      }
    }

    // Use capture phase to catch events before they might be stopped
    document.addEventListener('click', handleEndnoteBackClick, true);
    return () => document.removeEventListener('click', handleEndnoteBackClick, true);
  }, []);

  const chapterRefs = useRef<(HTMLDivElement | null)[]>([]);
  const [markerStyle, setMarkerStyle] = useState({ top: 0, height: 0 });
  const dropdownRef = useRef<HTMLDivElement>(null);

  useLayoutEffect(() => {
    const el = chapterRefs.current[selectedChapter];
    if (el) {
      setMarkerStyle({
        top: el.offsetTop,
        height: el.offsetHeight,
      });
    }
  }, [selectedChapter, chapters.length]);

  // Click outside to close dropdown
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setChapterTypeDropdownOpen(false);
      }
    }
    if (chapterTypeDropdownOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [chapterTypeDropdownOpen]);

  // Migration from localStorage to cloud
  useEffect(() => {
    async function migrateLocalStorageToCloud() {
      if (migrated) return;

      const localBooks = loadBookLibrary();
      if (localBooks.length > 0) {
        console.log(`Migrating ${localBooks.length} books from localStorage to cloud...`);
        
        for (const book of localBooks) {
          try {
            await cloudBooks.createBook({
              title: book.title || "",
              author: book.author || "",
              blurb: book.blurb || null,
              coverUrl: book.coverUrl || null,
              publisher: book.publisher || null,
              pubDate: book.pubDate || null,
              isbn: book.isbn || null,
              language: book.language || null,
              genre: book.genre || null,
              chapters: book.chapters || [],
              tags: book.tags || [],
              endnotes: book.endnotes || [],
              endnoteReferences: book.endnoteReferences || [],
            });
          } catch (error) {
            console.error(`Failed to migrate book ${book.id}:`, error);
          }
        }

        // Clear localStorage after successful migration
        localStorage.removeItem(BOOK_LIBRARY_KEY);
        console.log('Migration complete. LocalStorage cleared.');
      }

      setMigrated(true);
    }

    migrateLocalStorageToCloud();
  }, [migrated, cloudBooks]);

  // Load books from cloud
  useEffect(() => {
    async function loadCloudBooks() {
      setIsLoadingBooks(true);
      const books = await cloudBooks.getAllBooks();
      setLibraryBooks(books);
      setIsLoadingBooks(false);

      const loadBookId = searchParams.get('load');
      if (loadBookId) {
        await handleLoadCloudBook(loadBookId);
        router.replace('/make-ebook', { scroll: false });
        setInitialized(true);
        return;
      }

      if (!initialized && books.length > 0 && !currentBookId && chapters.length === 0) {
        const mostRecent = books.reduce((a, b) => {
          const aTime = new Date(a.updatedAt).getTime();
          const bTime = new Date(b.updatedAt).getTime();
          return aTime > bTime ? a : b;
        });
        
        loadBookDataIntoEditor(mostRecent);
        setCurrentBookId(mostRecent.id);
      }

      if (!initialized) setInitialized(true);
    }

    if (migrated) {
      loadCloudBooks();
    }
  }, [searchParams, initialized, currentBookId, chapters.length, migrated, cloudBooks]);

  function showNewBookConfirmation() {
    setNewBookConfirmOpen(true);
  }

  function clearEditorState() {
    // Clear all editor data for new book
    setTitle("");
    setAuthor("");
    setBlurb("");
    setPublisher("");
    setPubDate(today);
    setIsbn("");
    setLanguage(LANGUAGES[0]);
    setGenre("");
    setTags([]);
    setCoverFile(null);
    setChapters([]);
    setEndnotes([]);
    setEndnoteReferences([]);
    setNextEndnoteNumber(1);
    setCurrentBookId(undefined);
  }

  async function handleNewBookConfirm() {
    // Save current book before starting new one
    if (title || author || chapters.some(ch => ch.content.trim())) {
      await saveForNewBook();
    } else {
      // No content to save, just clear and start new
      clearEditorState();
      setNewBookConfirmOpen(false);
    }
  }

  async function saveForNewBook() {
    // Save and then clear
    await saveBookToCloud(false);
    clearEditorState();
    setNewBookConfirmOpen(false);
    
    // Refresh library
    const books = await cloudBooks.getAllBooks();
    setLibraryBooks(books);
  }

  function handleNewBook() {
    // Legacy function for backwards compatibility
    handleNewBookConfirm();
  }

  // Scroll indicator effect for mobile sidebar
  useEffect(() => {
    const handleScroll = () => {
      if (scrollContainerRef.current) {
        const { scrollTop, scrollHeight, clientHeight } = scrollContainerRef.current;
        const hasMoreContent = scrollTop + clientHeight < scrollHeight - 10; // 10px threshold
        setShowScrollIndicator(hasMoreContent);
      }
    };

    const container = scrollContainerRef.current;
    if (container && mobileSidebarOpen) {
      // Check initially
      handleScroll();
      // Add scroll listener
      container.addEventListener('scroll', handleScroll);
      return () => container.removeEventListener('scroll', handleScroll);
    }
  }, [mobileSidebarOpen, tab]); // Re-check when tab changes as content changes

  async function handleExportEPUB() {
    // Ensure all chapters have IDs before export
    const migratedChapters = ensureChapterIds(chapters);
    const migratedEndnoteRefs = migrateEndnoteReferences(endnoteReferences, migratedChapters);
    
    // Update state with migrated data
    setChapters(migratedChapters);
    setEndnoteReferences(migratedEndnoteRefs);
    
    await exportEpub({
      title,
      author,
      blurb,
      publisher,
      pubDate,
      isbn,
      language,
      genre,
      tags,
      coverFile,
      chapters: migratedChapters,
      endnoteReferences: migratedEndnoteRefs,
    });
  }

  async function handleSaveBook() {
    if (currentBookId) {
      setSaveDialogOpen(true);
      return;
    }
    
    // No existing book, save normally
    await saveBookToCloud(false);
  }

  async function saveBookToCloud(forceNewVersion: boolean) {
    const bookData = {
      title,
      author,
      blurb,
      publisher,
      pubDate,
      isbn,
      language,
      genre,
      tags,
      coverUrl,
      chapters,
      endnotes,
      endnoteReferences,
    };
    
    let savedBook;
    if (forceNewVersion) {
      savedBook = await cloudBooks.createBook(bookData);
    } else {
      savedBook = await cloudBooks.saveBook(currentBookId, bookData);
    }

    if (savedBook) {
      setCurrentBookId(savedBook.id);
      const books = await cloudBooks.getAllBooks();
      setLibraryBooks(books);
      setSaveFeedback(true);
      setTimeout(() => setSaveFeedback(false), 1300);
    }
  }

  async function handleOverwriteBook() {
    setSaveDialogOpen(false);
    await saveBookToCloud(false);
    
    // If this was triggered from new book flow, clear editor after save
    if (newBookConfirmOpen) {
      clearEditorState();
      setNewBookConfirmOpen(false);
    }
  }

  async function handleSaveAsNewVersion() {
    setSaveDialogOpen(false);
    await saveBookToCloud(true);
    
    // If this was triggered from new book flow, clear editor after save
    if (newBookConfirmOpen) {
      clearEditorState();
      setNewBookConfirmOpen(false);
    }
  }

  // Endnote Management Functions
  function createEndnote(selectedText: string, sourceChapterId: string) {
    const endnoteId = `endnote-${Date.now()}`;
    const endnoteNumber = nextEndnoteNumber;
    
    // Create the endnote
    const newEndnote: Endnote = {
      id: endnoteId,
      number: endnoteNumber,
      content: selectedText,
      sourceChapterId,
      sourceText: selectedText,
    };
    
    // Create the reference
    const newReference: EndnoteReference = {
      id: `ref${endnoteNumber}`,
      number: endnoteNumber,
      chapterId: sourceChapterId,
      endnoteId,
    };
    
    setEndnotes(prev => [...prev, newEndnote]);
    setEndnoteReferences(prev => [...prev, newReference]);
    setNextEndnoteNumber(prev => prev + 1);
    markDirty();
    
    // Create a clickable endnote reference with proper ePub structure
    const endnoteLink = `<a class="note-${endnoteNumber}" href="#end${endnoteNumber}" id="ref${endnoteNumber}" title="note ${endnoteNumber}" data-endnote-ref="${endnoteNumber}" data-endnote-id="${endnoteId}" style="color: #0066cc; text-decoration: none;"><sup>[${endnoteNumber}]</sup></a>`;
    
    return endnoteLink;
  }
  
  function updateEndnotesChapterContent() {
    let endnotesChapterIndex = chapters.findIndex(ch => ch.title.toLowerCase() === 'endnotes');
    
    // Generate endnotes content (create shallow copy to avoid mutating state)
    const endnotesContent = [...endnotes]
      .sort((a, b) => a.number - b.number)
      .map(endnote => {
        const backLink = `<a href="#ref${endnote.number}" id="end${endnote.number}" data-back-to-ref="${endnote.number}" class="endnote-back" style="color: #0066cc; text-decoration: none; margin-left: 8px; cursor: pointer; user-select: none; font-weight: bold; font-size: 14px; padding: 2px 6px; border: 1px solid #0066cc; border-radius: 3px; background-color: #f0f8ff; display: inline-block;">[${endnote.number}]</a>`;
        return `<p>${endnote.number}. ${endnote.content} ${backLink}</p>`;
      })
      .join('');
    
    const updatedChapters = [...chapters];
    
    if (endnotesChapterIndex === -1) {
      // Only create new endnotes chapter if we have endnotes to show
      if (endnotes.length === 0) return;
      
      const newEndnotesChapter = {
        id: `endnotes-${Date.now()}`,
        title: 'Endnotes',
        content: endnotesContent,
        type: 'backmatter' as const,
      };
      updatedChapters.push(newEndnotesChapter);
    } else {
      // Update existing endnotes chapter (or remove if no endnotes)
      if (endnotes.length === 0) {
        // Remove the endnotes chapter if there are no endnotes
        updatedChapters.splice(endnotesChapterIndex, 1);
      } else {
        updatedChapters[endnotesChapterIndex] = {
          ...updatedChapters[endnotesChapterIndex],
          content: endnotesContent,
        };
      }
    }
    
    setChapters(updatedChapters);
  }
  
  // Migration function to ensure all chapters have IDs
  function ensureChapterIds(chapters: Chapter[]): Chapter[] {
    return chapters.map(chapter => ({
      ...chapter,
      id: chapter.id || `chapter-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    }));
  }

  // Migration function to update endnote references with unknown chapter IDs
  function migrateEndnoteReferences(endnoteRefs: EndnoteReference[], chapters: Chapter[]): EndnoteReference[] {
    return endnoteRefs.map(ref => {
      if (ref.chapterId === 'unknown' || !ref.chapterId) {
        // Try to find the chapter by context - for now, assign to first content chapter
        const firstContentChapter = chapters.find(ch => ch.type === 'content');
        return {
          ...ref,
          chapterId: firstContentChapter?.id || chapters[0]?.id || 'fallback-chapter'
        };
      }
      return ref;
    });
  }

  function handleCreateEndnote(selectedText: string, chapterId?: string) {
    if (!selectedText.trim()) return '';
    
    const currentChapterId = chapterId || (selectedChapter >= 0 && chapters[selectedChapter] ? chapters[selectedChapter].id : 'unknown');
    const endnoteLink = createEndnote(selectedText, currentChapterId);
    
    return endnoteLink;
  }

  function loadBookDataIntoEditor(book: any) {
    setTitle(book.title || "");
    setAuthor(book.author || "");
    setBlurb(book.blurb || "");
    setPublisher(book.publisher || "");
    setPubDate(book.pubDate || today);
    setIsbn(book.isbn || "");
    setLanguage(book.language || LANGUAGES[0]);
    setGenre(book.genre || "");
    setTags(book.tags || []);
    setCoverFile(book.coverFile || null);
    
    // Migrate chapters to ensure they have IDs
    const migratedChapters = ensureChapterIds(book.chapters || []);
    setChapters(migratedChapters);
    
    // Migrate endnote references if they exist
    if (book.endnoteReferences) {
      const migratedEndnoteRefs = migrateEndnoteReferences(book.endnoteReferences, migratedChapters);
      setEndnoteReferences(migratedEndnoteRefs);
    }
    
    setEndnotes(book.endnotes || []);
  }

  async function handleLoadCloudBook(id: string) {
    const book = await cloudBooks.getBook(id);
    if (book) {
      loadBookDataIntoEditor(book);
      setCurrentBookId(book.id);
      setLibraryOpen(false);
    }
  }

  async function handleDeleteBook(id: string) {
    if (confirm('Are you sure you want to delete this eBook? This action cannot be undone.')) {
      const success = await cloudBooks.deleteBook(id);
      if (success) {
        const books = await cloudBooks.getAllBooks();
        setLibraryBooks(books);
        if (currentBookId === id) {
          clearEditorState();
        }
      }
    }
  }

  // Mark dirty when fields change
  useEffect(() => {
    if (initialized && currentBookId) {
      markDirty();
    }
  }, [title, author, blurb, publisher, pubDate, isbn, language, genre, tags, coverUrl, chapters, endnotes, endnoteReferences]);

  const totalWords = chapters.reduce(
    (sum, ch) => sum + (plainText(ch.content).split(/\s+/).filter(Boolean).length || 0),
    0
  );
  const pageCount = Math.max(1, Math.ceil(totalWords / 300));
  const readingTime = Math.max(1, Math.round(totalWords / 200));

  // Save status indicator component
  const SaveStatusIndicator = () => {
    if (saveStatus === 'idle') return null;
    
    return (
      <div className="fixed bottom-4 right-4 z-50 flex items-center gap-2 px-4 py-2 rounded-lg shadow-lg transition-all">
        {saveStatus === 'saving' && (
          <div className="flex items-center gap-2 bg-blue-500 text-white px-4 py-2 rounded-lg">
            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            <span className="text-sm font-medium">Saving...</span>
          </div>
        )}
        {saveStatus === 'saved' && (
          <div className="flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded-lg">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            <span className="text-sm font-medium">Saved</span>
          </div>
        )}
        {saveStatus === 'error' && (
          <div className="flex items-center gap-2 bg-red-500 text-white px-4 py-2 rounded-lg">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
            <span className="text-sm font-medium">Error saving</span>
          </div>
        )}
      </div>
    );
  };

  return (
    <div>
      {/* Save Status Indicator */}
      <SaveStatusIndicator />

      {/* Fixed Header */}
      <div className="fixed top-0 left-0 w-full z-[110]">
        <Header />
      </div>
      {/* Main Content */}
      <div className="bg-[#FFFFFF] text-[#15161a] pt-[64px]">
        {/* Library Panel */}
        {libraryOpen && (
          <div className="fixed inset-0 z-[120] bg-black/20 flex items-start justify-center">
            <div className="bg-white rounded shadow-2xl p-6 mt-20 w-full max-w-md">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-bold flex items-center gap-2">
                  <LibraryIcon className="w-6 h-6" /> Library
                </h2>
                <button onClick={() => setLibraryOpen(false)} className="text-xl">&times;</button>
              </div>
              {isLoadingBooks ? (
                <div className="text-gray-500 text-center py-8">Loading books...</div>
              ) : libraryBooks.length === 0 ? (
                <div className="text-gray-500 text-center py-8">No books saved</div>
              ) : (
                <ul>
                  {libraryBooks
                    .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
                    .map((b) => (
                    <li key={b.id} className="flex items-center gap-2 border-b last:border-b-0 py-2">
                      <button
                        className="flex-1 text-left hover:underline"
                        onClick={() => handleLoadCloudBook(b.id)}
                        title={b.title}
                      >
                        <span className="font-semibold">{b.title || "Untitled"}</span>
                        <span className="text-sm text-gray-500 ml-2">{b.author}</span>
                        <span className="block text-xs text-gray-400">{new Date(b.updatedAt).toLocaleString()}</span>
                      </button>
                      <button
                        className="text-gray-400 hover:text-red-500"
                        onClick={() => handleDeleteBook(b.id)}
                        title="Delete book"
                      >
                        <TrashIcon className="w-4 h-4" />
                      </button>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
        )}

        {/* New Book Confirmation Dialog */}
        {newBookConfirmOpen && (
          <div className="fixed inset-0 z-[130] bg-black/20 flex items-center justify-center p-4">
            <div className="bg-white rounded shadow-2xl p-6 max-w-md w-full">
              <h2 className="text-lg font-bold mb-4">Start New Book?</h2>
              <p className="text-gray-600 mb-6">
                This will save your current book and start a new one. All your current work will be preserved in the library.
              </p>
              <div className="flex gap-3">
                <button
                  onClick={() => setNewBookConfirmOpen(false)}
                  className="flex-1 px-4 py-2 rounded border border-[#E8E8E8] text-sm font-medium hover:bg-[#F2F2F2] transition-colors"
                >
                  Go Back
                </button>
                <button
                  onClick={handleNewBookConfirm}
                  className="flex-1 px-4 py-2 rounded bg-[#181a1d] text-white text-sm font-medium hover:bg-[#23252a] transition-colors"
                >
                  Continue
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Save Dialog */}
        {saveDialogOpen && (
          <div className="fixed inset-0 z-[130] bg-black/20 flex items-center justify-center p-4">
            <div className="bg-white rounded shadow-2xl p-6 max-w-md w-full">
              <h2 className="text-lg font-bold mb-4">Save Book</h2>
              <p className="text-gray-600 mb-6">
                This book already exists in your library. Do you want to overwrite the existing version or save as a new version?
              </p>
              <div className="flex gap-3">
                <button
                  onClick={() => setSaveDialogOpen(false)}
                  className="flex-1 px-4 py-2 rounded border border-[#E8E8E8] text-sm font-medium hover:bg-[#F2F2F2] transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleOverwriteBook}
                  className="flex-1 px-4 py-2 rounded bg-orange-600 text-white text-sm font-medium hover:bg-orange-700 transition-colors"
                >
                  Overwrite
                </button>
                <button
                  onClick={handleSaveAsNewVersion}
                  className="flex-1 px-4 py-2 rounded bg-[#181a1d] text-white text-sm font-medium hover:bg-[#23252a] transition-colors"
                >
                  Save as New
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Mobile Sidebar Overlay */}
        <div className={`fixed top-[64px] left-0 right-0 bottom-0 z-[100] lg:hidden transition-all duration-300 ease-out ${
          mobileSidebarOpen ? 'visible' : 'invisible'
        }`}>
          {/* Backdrop */}
          <div 
            className={`absolute inset-0 bg-black/20 transition-opacity duration-300 ease-out ${
              mobileSidebarOpen ? 'opacity-100' : 'opacity-0'
            }`}
            onClick={() => setMobileSidebarOpen(false)}
          />
          {/* Sidebar Panel */}
          <div className={`absolute top-0 left-0 h-full w-full bg-white shadow-2xl transform transition-transform duration-300 ease-out ${
            mobileSidebarOpen ? 'translate-x-0' : '-translate-x-full'
          }`}>
              <div className="flex flex-col h-full">
                {/* Header with Actions */}
                <div className="flex items-center justify-end p-4 border-b border-[#E8E8E8]">
                  <button
                    onClick={() => setMobileSidebarOpen(false)}
                    className="hover:opacity-70 transition-opacity flex flex-col items-center gap-1"
                    aria-label="Close sidebar menu"
                  >
                    <div className="bg-white rounded-full p-2 shadow-lg border border-gray-200">
                      <CloseIcon className="w-4 h-4" />
                    </div>
                    <span className="text-xs font-medium text-[#050505]">Close</span>
                  </button>
                </div>
                
                {/* Tab Navigation */}
                <nav className="flex p-3 gap-2">
                  {["setup", "preview", "library"].map((key) => (
                    <button
                      key={key}
                      className={`flex flex-col items-center gap-1 px-4 py-2 rounded text-xs font-semibold transition whitespace-nowrap min-w-0 flex-1 ${
                        tab === key
                          ? "bg-white text-[#15161a] border border-[#050505] shadow-sm"
                          : "hover:bg-[#F2F2F2] text-[#737373]"
                      }`}
                      onClick={() => setTab(key as any)}
                    >
                      {key === "setup" && <MetadataIcon className="w-5 h-5" />}
                      {key === "preview" && <PreviewIcon className="w-5 h-5" />}
                      {key === "library" && <LibraryIcon className="w-5 h-5" />}
                      <span>{key.charAt(0).toUpperCase() + key.slice(1)}</span>
                    </button>
                  ))}
                </nav>

                {/* Scroll Container */}
                <div ref={scrollContainerRef} className="flex-1 overflow-y-auto px-4 pb-4 relative">
                  {tab === "setup" && (
                    <MetaTabContent
                      title={title}
                      setTitle={(val) => { setTitle(val); markDirty(); }}
                      author={author}
                      setAuthor={(val) => { setAuthor(val); markDirty(); }}
                      blurb={blurb}
                      setBlurb={(val) => { setBlurb(val); markDirty(); }}
                      publisher={publisher}
                      setPublisher={(val) => { setPublisher(val); markDirty(); }}
                      pubDate={pubDate}
                      setPubDate={(val) => { setPubDate(val); markDirty(); }}
                      isbn={isbn}
                      setIsbn={(val) => { setIsbn(val); markDirty(); }}
                      language={language}
                      setLanguage={(val) => { setLanguage(val); markDirty(); }}
                      genre={genre}
                      setGenre={(val) => { setGenre(val); markDirty(); }}
                      tags={tags}
                      setTags={(val) => { setTags(val); markDirty(); }}
                      tagInput={tagInput}
                      setTagInput={setTagInput}
                      coverFile={coverFile}
                      setCoverFile={(val) => { setCoverFile(val); markDirty(); }}
                      lockedSections={lockedSections}
                      setLockedSections={setLockedSections}
                      handleAddTag={handleAddTag}
                      handleRemoveTag={handleRemoveTag}
                      handleCoverChange={handleCoverChange}
                    />
                  )}
                  {tab === "preview" && (
                    <PreviewPanel
                      coverUrl={coverUrl}
                      title={title}
                      author={author}
                      pubDate={pubDate}
                      language={language}
                      genre={genre}
                      tags={tags}
                      chapters={chapters}
                      totalWords={totalWords}
                      pageCount={pageCount}
                      readingTime={readingTime}
                    />
                  )}
                  {tab === "library" && (
                    <div className="space-y-4">
                      {isLoadingBooks ? (
                        <div className="text-center py-12">
                          <p className="text-gray-500">Loading your library...</p>
                        </div>
                      ) : libraryBooks.length === 0 ? (
                        <div className="text-center py-12">
                          <Image
                            src="/caveman.svg"
                            alt="makeEbook caveman"
                            width={48}
                            height={48}
                            className="w-12 h-12 mx-auto mb-4 opacity-60"
                          />
                          <p className="text-gray-500">
                            Why not write your first masterpiece?<br />
                            <span className="text-sm">The Biscuit Thief. Chapter one: The Thief Grows Peckish!📚</span>
                          </p>
                        </div>
                      ) : (
                        <ul className="space-y-2">
                          {libraryBooks.map((b: any) => (
                            <li key={b.id} className={`flex items-center justify-between p-3 border rounded transition-colors ${
                              selectedBookId === b.id 
                                ? 'border-black bg-white' 
                                : 'border-[#E8E8E8] hover:bg-[#F2F2F2]'
                            }`}>
                              <div className="flex items-center gap-3 flex-1">
                                {/* Book Cover Preview */}
                                <div className="flex-shrink-0 w-8 h-12 bg-gray-100 rounded border border-gray-200 flex items-center justify-center">
                                  {b.coverUrl ? (
                                    <img
                                      src={b.coverUrl}
                                      alt="Book cover"
                                      className="w-full h-full object-cover rounded"
                                    />
                                  ) : (
                                    <PreviewIcon className="w-4 h-4 text-gray-400" />
                                  )}
                                </div>
                                <button
                                  className="flex-1 text-left focus:outline-none border-none bg-transparent"
                                  onClick={() => {
                                    setSelectedBookId(selectedBookId === b.id ? null : b.id);
                                  }}
                                  title={b.title}
                                >
                                  <div className="font-semibold">{b.title || "Untitled"}</div>
                                  <div className="text-sm text-gray-500">{b.author}</div>
                                  <div className="text-xs text-gray-400">{new Date(b.updatedAt).toLocaleString()}</div>
                                </button>
                              </div>
                              <div className="flex items-center gap-1">
                                <button
                                  className={`px-2 py-1 text-xs font-medium focus:outline-none transition-colors ${
                                    selectedBookId === b.id 
                                      ? 'text-black underline hover:no-underline' 
                                      : 'text-gray-300 cursor-not-allowed'
                                  }`}
                                  onClick={() => {
                                    if (selectedBookId === b.id) {
                                      handleLoadCloudBook(b.id);
                                      setSelectedBookId(null);
                                    }
                                  }}
                                  disabled={selectedBookId !== b.id}
                                  title={selectedBookId === b.id ? "Load selected book" : "Select book first"}
                                >
                                  Load
                                </button>
                                <button
                                  className="text-gray-400 hover:text-red-500 p-1 focus:outline-none"
                                  onClick={() => handleDeleteBook(b.id)}
                                  title="Delete book"
                                >
                                  <TrashIcon className="w-4 h-4" />
                                </button>
                              </div>
                            </li>
                          ))}
                        </ul>
                      )}
                    </div>
                  )}
                </div>

                {/* Scroll Indicator */}
                {showScrollIndicator && (
                  <div className="absolute bottom-0 left-0 right-0 h-12 bg-gradient-to-t from-white to-transparent pointer-events-none flex items-end justify-center pb-2">
                    <div className="text-xs text-gray-400 animate-bounce">↓ Scroll for more</div>
                  </div>
                )}
              </div>
            </div>
        </div>

        {/* Desktop Layout */}
        <div className="hidden lg:flex max-w-[1600px] mx-auto gap-6 px-6 pt-6 pb-12">
          {/* Sidebar */}
          <aside className="w-80 flex-shrink-0 h-[calc(100vh-64px-96px)] overflow-y-auto space-y-4 sticky top-[64px] flex flex-col gap-2">
            {/* Tab Navigation */}
            <nav className="flex gap-2 pb-3 border-b border-[#E8E8E8]">
              {["setup", "preview", "library"].map((key) => (
                <button
                  key={key}
                  className={`flex items-center gap-2 px-3 py-2 rounded text-xs font-semibold transition ${
                    tab === key
                      ? "bg-white text-[#15161a] border border-[#050505] shadow-sm"
                      : "hover:bg-[#F2F2F2] text-[#737373]"
                  }`}
                  onClick={() => setTab(key as any)}
                >
                  {key === "setup" && <MetadataIcon className="w-5 h-5" />}
                  {key === "preview" && <PreviewIcon className="w-5 h-5" />}
                  {key === "library" && <LibraryIcon className="w-5 h-5" />}
                  {key.charAt(0).toUpperCase() + key.slice(1)}
                </button>
              ))}
            </nav>

            {/* Tab Content */}
            <div className="flex-1 overflow-y-auto">
              {tab === "setup" && (
                <MetaTabContent
                  title={title}
                  setTitle={(val) => { setTitle(val); markDirty(); }}
                  author={author}
                  setAuthor={(val) => { setAuthor(val); markDirty(); }}
                  blurb={blurb}
                  setBlurb={(val) => { setBlurb(val); markDirty(); }}
                  publisher={publisher}
                  setPublisher={(val) => { setPublisher(val); markDirty(); }}
                  pubDate={pubDate}
                  setPubDate={(val) => { setPubDate(val); markDirty(); }}
                  isbn={isbn}
                  setIsbn={(val) => { setIsbn(val); markDirty(); }}
                  language={language}
                  setLanguage={(val) => { setLanguage(val); markDirty(); }}
                  genre={genre}
                  setGenre={(val) => { setGenre(val); markDirty(); }}
                  tags={tags}
                  setTags={(val) => { setTags(val); markDirty(); }}
                  tagInput={tagInput}
                  setTagInput={setTagInput}
                  coverFile={coverFile}
                  setCoverFile={(val) => { setCoverFile(val); markDirty(); }}
                  lockedSections={lockedSections}
                  setLockedSections={setLockedSections}
                  handleAddTag={handleAddTag}
                  handleRemoveTag={handleRemoveTag}
                  handleCoverChange={handleCoverChange}
                />
              )}
              {tab === "preview" && (
                <PreviewPanel
                  coverUrl={coverUrl}
                  title={title}
                  author={author}
                  pubDate={pubDate}
                  language={language}
                  genre={genre}
                  tags={tags}
                  chapters={chapters}
                  totalWords={totalWords}
                  pageCount={pageCount}
                  readingTime={readingTime}
                />
              )}
              {tab === "library" && (
                <div className="space-y-4">
                  {isLoadingBooks ? (
                    <div className="text-center py-12">
                      <p className="text-gray-500">Loading your library...</p>
                    </div>
                  ) : libraryBooks.length === 0 ? (
                    <div className="text-center py-12">
                      <Image
                        src="/caveman.svg"
                        alt="makeEbook caveman"
                        width={48}
                        height={48}
                        className="w-12 h-12 mx-auto mb-4 opacity-60"
                      />
                      <p className="text-gray-500">
                        Why not write your first masterpiece?<br />
                        <span className="text-sm">The Biscuit Thief. Chapter one: The Thief Grows Peckish!📚</span>
                      </p>
                    </div>
                  ) : (
                    <ul className="space-y-2">
                      {libraryBooks.map((b: any) => (
                        <li key={b.id} className={`flex items-center justify-between p-3 border rounded transition-colors ${
                          selectedBookId === b.id 
                            ? 'border-black bg-white' 
                            : 'border-[#E8E8E8] hover:bg-[#F2F2F2]'
                        }`}>
                          <div className="flex items-center gap-3 flex-1">
                            {/* Book Cover Preview */}
                            <div className="flex-shrink-0 w-8 h-12 bg-gray-100 rounded border border-gray-200 flex items-center justify-center">
                              {b.coverUrl ? (
                                <img
                                  src={b.coverUrl}
                                  alt="Book cover"
                                  className="w-full h-full object-cover rounded"
                                />
                              ) : (
                                <PreviewIcon className="w-4 h-4 text-gray-400" />
                              )}
                            </div>
                            <button
                              className="flex-1 text-left focus:outline-none border-none bg-transparent"
                              onClick={() => {
                                setSelectedBookId(selectedBookId === b.id ? null : b.id);
                              }}
                              title={b.title}
                            >
                              <div className="font-semibold">{b.title || "Untitled"}</div>
                              <div className="text-sm text-gray-500">{b.author}</div>
                              <div className="text-xs text-gray-400">{new Date(b.updatedAt).toLocaleString()}</div>
                            </button>
                          </div>
                          <div className="flex items-center gap-1">
                            <button
                              className={`px-2 py-1 text-xs font-medium focus:outline-none transition-colors ${
                                selectedBookId === b.id 
                                  ? 'text-black underline hover:no-underline' 
                                  : 'text-gray-300 cursor-not-allowed'
                              }`}
                              onClick={() => {
                                if (selectedBookId === b.id) {
                                  handleLoadCloudBook(b.id);
                                  setSelectedBookId(null);
                                }
                              }}
                              disabled={selectedBookId !== b.id}
                              title={selectedBookId === b.id ? "Load selected book" : "Select book first"}
                            >
                              Load
                            </button>
                            <button
                              className="text-gray-400 hover:text-red-500 p-1 focus:outline-none"
                              onClick={() => handleDeleteBook(b.id)}
                              title="Delete book"
                            >
                              <TrashIcon className="w-4 h-4" />
                            </button>
                          </div>
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              )}
            </div>
          </aside>

          {/* Main Editor Panel - Mobile Optimised */}
          <main className="flex-1 flex flex-col bg-white rounded shadow-sm mt-4 px-2 lg:px-8 py-8 lg:py-0 lg:pb-8 min-w-0 overflow-hidden relative">
            {/* Mobile Hamburger Menu - Fixed Position */}
            <button
              onClick={() => setMobileSidebarOpen(true)}
              className="lg:hidden fixed top-[80px] z-10 hover:opacity-70 transition-opacity flex flex-col items-center gap-1 pb-5"
              style={{ left: '8px' }}
              aria-label="Open sidebar menu"
            >
              <div className="bg-white rounded-full p-2 shadow-lg border border-gray-200">
                <MenuIcon className="w-4 h-4" />
              </div>
              <span className="text-xs font-medium text-[#050505]">Open</span>
            </button>

            {/* Mobile Divider Line */}
            <div className="lg:hidden mt-11 mb-4">
              <div className="border-t border-[#E8E8E8]"></div>
            </div>

            {/* Mobile Book Title Input */}
            <div className="lg:hidden mb-4 flex-shrink-0">
              {/* Book Heading with Action Buttons */}
              <div className="mb-2 flex items-center justify-between">
                <h2 className="flex items-center gap-2 text-sm font-medium text-[#050505]">
                  <PreviewIcon className="w-4 h-4" stroke="#050505" />
                  Book
                </h2>
                {/* Action Buttons */}
                <div className="flex items-center gap-4">
                  <button
                    onClick={() => {
                      showNewBookConfirmation();
                      setMobileSidebarOpen(false);
                    }}
                    className="hover:opacity-70 transition-opacity flex flex-col items-center gap-1"
                    type="button"
                  >
                    <div className="bg-white rounded-full p-2 shadow-lg border border-gray-200">
                      <PlusIcon className="w-4 h-4" />
                    </div>
                    <span className="text-xs font-medium text-[#050505]">New Book</span>
                  </button>
                  
                  <button
                    onClick={() => {
                      handleSaveBook();
                      setMobileSidebarOpen(false);
                    }}
                    className="hover:opacity-70 transition-opacity flex flex-col items-center gap-1"
                    disabled={!!saveFeedback}
                    type="button"
                  >
                    <div className="bg-white rounded-full p-2 shadow-lg border border-gray-200">
                      <SaveIcon className="w-4 h-4" />
                    </div>
                    <span className={`text-xs font-medium text-[#050505] transition-all ${saveFeedback ? "text-green-600 font-semibold" : ""}`}>
                      {saveFeedback ? "Saved!" : "Save"}
                    </span>
                  </button>
                  
                  <button
                    onClick={() => {
                      handleExportEPUB();
                      setMobileSidebarOpen(false);
                    }}
                    className="hover:opacity-70 transition-opacity flex flex-col items-center gap-1"
                    type="button"
                  >
                    <div className="bg-white rounded-full p-2 shadow-lg border border-gray-200">
                      <DownloadIcon className="w-4 h-4" />
                    </div>
                    <span className="text-xs font-medium text-[#050505]">Export</span>
                  </button>
                </div>
              </div>
              <div className="pb-3 border-b border-[#E8E8E8]">
                <div className="flex items-center gap-3">
                  {lockedSections.bookInfo && (
                    <LockIcon className="w-5 h-5 opacity-60" />
                  )}
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => { setTitle(e.target.value); markDirty(); }}
                    disabled={lockedSections.bookInfo}
                    className="text-lg font-medium bg-white border border-transparent focus:border-black outline-none focus:outline-none focus:ring-0 flex-1 disabled:cursor-not-allowed px-2 py-1 rounded placeholder:text-[#a0a0a0]"
                    style={{ 
                      color: lockedSections.bookInfo ? "#737373" : (title ? "#23242a" : "#737373"),
                      boxShadow: "none"
                    }}
                    placeholder={lockedSections.bookInfo ? "Book title (locked)" : "Enter book title..."}
                  />
                </div>
              </div>
            </div>

            {/* Desktop Header with Title and Toolbar */}
            <div className="hidden lg:block">
              {/* Book Heading */}
              <div className="mb-2">
                <h2 className="flex items-center gap-2 text-sm font-medium text-[#050505]">
                  <PreviewIcon className="w-4 h-4" stroke="#050505" />
                  Book
                </h2>
              </div>
              <div className="mb-3 pb-2 border-b border-[#E8E8E8]">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3 flex-1">
                    {lockedSections.bookInfo && (
                      <LockIcon className="w-5 h-5 opacity-60" />
                    )}
                    <input
                      type="text"
                      value={title}
                      onChange={(e) => { setTitle(e.target.value); markDirty(); }}
                      disabled={lockedSections.bookInfo}
                      className="text-lg font-medium bg-white border border-transparent focus:border-black outline-none focus:outline-none focus:ring-0 flex-1 disabled:cursor-not-allowed px-2 py-1 rounded placeholder:text-[#a0a0a0]"
                      style={{ 
                        color: lockedSections.bookInfo ? "#737373" : (title ? "#23242a" : "#737373"),
                        boxShadow: "none"
                      }}
                      placeholder={lockedSections.bookInfo ? "Book title (locked)" : "Enter book title..."}
                    />
                  </div>
                  <BookToolbar
                    onNewBook={showNewBookConfirmation}
                    onSave={handleSaveBook}
                    onExport={handleExportEPUB}
                    saveFeedback={saveFeedback}
                  />
                </div>
              </div>
            </div>

            {/* MOBILE OPTIMISED EDITOR - Full Viewport (including tablets) */}
            <div className="lg:hidden flex flex-col gap-2 flex-1 min-h-0 overflow-y-auto">
              {/* Compact Chapter Header */}
              <div className="flex-shrink-0 bg-white border-b border-[#F2F2F2] pb-2">
                {/* Compact Chapter Tabs */}
                <div className="mb-2">
                  <div className="flex items-center justify-between mb-1">
                    <div className="flex items-center gap-2">
                      <ChaptersIcon className="w-5 h-5" />
                      <h3 className="text-sm font-bold text-[#050505]">Chapters</h3>
                    </div>
                    <div className="relative" ref={dropdownRef} style={{ marginLeft: '8px' }}>
                    <button
                      onClick={() => setChapterTypeDropdownOpen(!chapterTypeDropdownOpen)}
                      aria-label="Add new chapter"
                      className="hover:opacity-70 transition-opacity flex flex-col items-center gap-1"
                    >
                      <div className="bg-white rounded-full p-2 shadow-lg border border-gray-200">
                        <PlusIcon className="w-4 h-4" />
                      </div>
                      <span className="text-xs font-medium text-[#050505]">Add</span>
                    </button>
                    {chapterTypeDropdownOpen && (
                      <div className="absolute z-50 top-full right-0 mt-1 w-72 bg-white rounded border border-[#E8E8E8] shadow-lg max-h-96 overflow-y-auto">
                        <div className="p-2">
                          <div className="space-y-3">
                            <div>
                              <div className="mb-2">
                                <h4 className="text-xs font-semibold text-[#050505] px-3 uppercase tracking-wider">Front Matter</h4>
                              </div>
                              <div className="space-y-1">
                                {CHAPTER_TEMPLATES.frontmatter.map((template) => (
                                  <button
                                    key={template.title}
                                    onClick={(e) => {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      console.log('Clicked template:', template);
                                      handleAddChapter('frontmatter', template.title === 'Custom Front Matter' ? '' : template.title);
                                      setChapterTypeDropdownOpen(false);
                                      markDirty();
                                    }}
                                    className="w-full text-left px-3 py-2 rounded-md hover:bg-[#F2F2F2] transition-colors"
                                  >
                                    <div className="text-sm font-medium text-[#15161a]">{template.title}</div>
                                  </button>
                                ))}
                              </div>
                            </div>
                            <div>
                              <div className="mb-2">
                                <h4 className="text-xs font-semibold text-[#050505] px-3 uppercase tracking-wider">Main Content</h4>
                              </div>
                              <div className="space-y-1">
                                {CHAPTER_TEMPLATES.content.map((template) => (
                                  <button
                                    key={template.title}
                                    onClick={(e) => {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      console.log('Clicked template:', template);
                                      handleAddChapter('content', template.title === 'Custom Chapter' ? '' : template.title);
                                      setChapterTypeDropdownOpen(false);
                                      markDirty();
                                    }}
                                    className="w-full text-left px-3 py-2 rounded-md hover:bg-[#F2F2F2] transition-colors"
                                  >
                                    <div className="text-sm font-medium text-[#15161a]">{template.title}</div>
                                  </button>
                                ))}
                              </div>
                            </div>
                            <div>
                              <div className="mb-2">
                                <h4 className="text-xs font-semibold text-[#050505] px-3 uppercase tracking-wider">Back Matter</h4>
                              </div>
                              <div className="space-y-1">
                                {CHAPTER_TEMPLATES.backmatter.map((template) => (
                                  <button
                                    key={template.title}
                                    onClick={(e) => {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      console.log('Clicked template:', template);
                                      handleAddChapter('backmatter', template.title === 'Custom Back Matter' ? '' : template.title);
                                      setChapterTypeDropdownOpen(false);
                                      markDirty();
                                    }}
                                    className="w-full text-left px-3 py-2 rounded-md hover:bg-[#F2F2F2] transition-colors"
                                  >
                                    <div className="text-sm font-medium text-[#15161a]">{template.title}</div>
                                  </button>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
                <p className="text-[10px] text-[#737373] -mb-1">Drag to reorder</p>
                {/* Chapter Pills - Wrapping Layout */}
                <div className="chapter-pills-container flex flex-wrap gap-2 pb-2 pt-2" style={{userSelect: 'none', WebkitUserSelect: 'none', WebkitTouchCallout: 'none'}}>
                  {chapters.map((ch, i) => {
                    const isSelected = selectedChapter === i;
                    const titleText = ch.title?.trim() || 'Title';
                    
                    // Calculate chapter type label and title
                    const getChapterInfo = () => {
                      if (ch.type === 'frontmatter') {
                        return {
                          typeLabel: 'Frontmatter',
                          title: titleText && titleText !== 'Title' ? titleText : 'Title'
                        };
                      }
                      if (ch.type === 'backmatter') {
                        return {
                          typeLabel: 'Backmatter', 
                          title: titleText && titleText !== 'Title' ? titleText : 'Title'
                        };
                      }
                      // Content chapters
                      const contentChapterNum = getContentChapterNumber(chapters, i);
                      return {
                        typeLabel: `Chapter ${contentChapterNum}`,
                        title: titleText && titleText !== 'Title' ? titleText : 'Title'
                      };
                    };

                    const { typeLabel, title } = getChapterInfo();
                    return (
                      <div
                        key={i}
                        data-chapter-idx={i}
                        className={`flex items-center gap-2 px-3 py-1.5 rounded text-xs font-medium transition-all cursor-pointer select-none group relative focus:outline-none ${
                          dragOverIndex === i 
                            ? 'border-2 border-dashed border-blue-400 bg-blue-50/50 scale-105 shadow-lg' 
                            : 'border-2 border-transparent'
                        } ${
                          isSelected 
                            ? "bg-[#181a1d] text-white shadow-sm" 
                            : "bg-[#F7F7F7] text-[#050505] hover:bg-[#F2F2F2]"
                        }`}
                        style={{ 
                          userSelect: 'none', 
                          WebkitUserSelect: 'none', 
                          WebkitTouchCallout: 'none',
                          // @ts-ignore - WebkitUserDrag is valid but not in TypeScript types
                          WebkitUserDrag: 'none',
                          opacity: dragItemIndex === i && ghostPillPosition.visible ? 0.3 : 1,
                        } as React.CSSProperties}
                        draggable
                        onDragStart={() => { handleDragStart(i); markDirty(); }}
                        onDragEnter={() => handleDragEnter(i)}
                        onDragEnd={handleDragEnd}
                        onTouchStart={(e) => handleTouchStart(i, e)}
                        onTouchMove={(e) => handleTouchMove(i, e)}
                        onTouchEnd={handleTouchEnd}
                        onClick={() => handleSelectChapter(i)}
                      >
                        <HandleDragIcon isSelected={isSelected} />
                        <div className="flex flex-col items-center gap-0 flex-1 justify-center">
                          <span className={`text-[10px] font-normal ${isSelected ? 'text-gray-300' : 'text-gray-500'}`}>
                            {typeLabel}
                          </span>
                          <span className={`text-xs font-medium ${isSelected ? 'text-white' : 'text-[#050505]'}`}>
                            {title}
                          </span>
                        </div>
                        {chapters.length > 1 && (
                          <button
                            className={`flex items-center justify-center focus:outline-none transition-all p-1 rounded ${
                              isSelected 
                                ? "opacity-100 hover:bg-white/30" 
                                : "opacity-70 hover:opacity-100 hover:bg-black/10"
                            }`}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleRemoveChapter(i);
                              markDirty();
                            }}
                            aria-label="Delete Chapter"
                          >
                            <BinIcon 
                              key={`bin-${i}-${isSelected}`}
                              className="w-4 h-4 transition"
                              stroke={isSelected ? "#ffffff" : "#050505"}
                            />
                          </button>
                        )}
                      </div>
                    );
                  })}
                </div>
                
                {/* Ghost Pill for Finger-Following Drag */}
                {ghostPillPosition.visible && (
                  <div
                    className="fixed z-50 pointer-events-none flex items-center gap-2 flex-shrink-0 px-3 py-1.5 rounded text-xs font-medium shadow-xl"
                    style={{
                      left: ghostPillPosition.x,
                      top: ghostPillPosition.y,
                      backgroundColor: ghostPillContent.isSelected ? "#181a1d" : "#F7F7F7",
                      color: ghostPillContent.isSelected ? "white" : "#6a6c72",
                      transform: "scale(1.1)",
                      opacity: 0.9,
                    }}
                  >
                    <HandleDragIcon isSelected={ghostPillContent.isSelected} />
                    <div className="flex flex-col items-center gap-0 flex-1 justify-center">
                      <span className={`text-[10px] font-normal ${ghostPillContent.isSelected ? 'text-gray-300' : 'text-gray-500'}`}>
                        {ghostPillContent.type === 'frontmatter' ? 'Front Matter' : ghostPillContent.type === 'backmatter' ? 'Back Matter' : 'Content'}
                      </span>
                      <span className={`text-xs font-medium ${ghostPillContent.isSelected ? 'text-white' : 'text-[#050505]'}`}>
                        {ghostPillContent.title}
                      </span>
                    </div>
                  </div>
                )}
              </div>

              {/* Selected Chapter Editor */}
              {chapters[selectedChapter] && (
                <div className="flex flex-col gap-3 flex-1 min-h-0">
                  {/* Chapter Title */}
                  <input
                    type="text"
                    value={chapters[selectedChapter].title}
                    onChange={(e) => { handleChapterTitleChange(selectedChapter, e.target.value); markDirty(); }}
                    placeholder="Chapter Title"
                    className="text-xl font-bold bg-white border border-[#E8E8E8] rounded px-4 py-3 focus:border-black outline-none focus:outline-none focus:ring-0 placeholder:text-[#a0a0a0]"
                    style={{ boxShadow: "none" }}
                  />
                  {/* Chapter Content */}
                  <div className="flex-1 min-h-0 overflow-hidden">
                    <RichTextEditor
                      value={chapters[selectedChapter].content}
                      onChange={(value) => { handleChapterContentChange(selectedChapter, value); markDirty(); }}
                      placeholder="Start writing your chapter..."
                      onCreateEndnote={handleCreateEndnote}
                      chapterId={chapters[selectedChapter].id}
                    />
                  </div>
                </div>
              )}
            </div>

            {/* DESKTOP EDITOR - Traditional layout (same as before) */}
            <div className="hidden lg:flex flex-col gap-4 flex-1 min-h-0">
              {/* Chapter Selection */}
              <div className="flex-shrink-0">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <ChaptersIcon className="w-5 h-5" />
                    <h3 className="text-sm font-bold text-[#050505]">Chapters</h3>
                  </div>
                  <div className="relative" ref={dropdownRef}>
                    <button
                      onClick={() => setChapterTypeDropdownOpen(!chapterTypeDropdownOpen)}
                      className="flex items-center gap-2 px-3 py-2 rounded text-xs font-medium bg-[#181a1d] text-white hover:bg-[#23252a] transition"
                    >
                      <PlusIcon className="w-4 h-4" />
                      Add Chapter
                    </button>
                    {chapterTypeDropdownOpen && (
                      <div className="absolute z-50 top-full right-0 mt-1 w-72 bg-white rounded border border-[#E8E8E8] shadow-lg max-h-96 overflow-y-auto">
                        <div className="p-2">
                          <div className="space-y-3">
                            <div>
                              <div className="mb-2">
                                <h4 className="text-xs font-semibold text-[#050505] px-3 uppercase tracking-wider">Front Matter</h4>
                              </div>
                              <div className="space-y-1">
                                {CHAPTER_TEMPLATES.frontmatter.map((template) => (
                                  <button
                                    key={template.title}
                                    onClick={(e) => {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      handleAddChapter('frontmatter', template.title === 'Custom Front Matter' ? '' : template.title);
                                      setChapterTypeDropdownOpen(false);
                                      markDirty();
                                    }}
                                    className="w-full text-left px-3 py-2 rounded-md hover:bg-[#F2F2F2] transition-colors"
                                  >
                                    <div className="text-sm font-medium text-[#15161a]">{template.title}</div>
                                  </button>
                                ))}
                              </div>
                            </div>
                            <div>
                              <div className="mb-2">
                                <h4 className="text-xs font-semibold text-[#050505] px-3 uppercase tracking-wider">Main Content</h4>
                              </div>
                              <div className="space-y-1">
                                {CHAPTER_TEMPLATES.content.map((template) => (
                                  <button
                                    key={template.title}
                                    onClick={(e) => {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      handleAddChapter('content', template.title === 'Custom Chapter' ? '' : template.title);
                                      setChapterTypeDropdownOpen(false);
                                      markDirty();
                                    }}
                                    className="w-full text-left px-3 py-2 rounded-md hover:bg-[#F2F2F2] transition-colors"
                                  >
                                    <div className="text-sm font-medium text-[#15161a]">{template.title}</div>
                                  </button>
                                ))}
                              </div>
                            </div>
                            <div>
                              <div className="mb-2">
                                <h4 className="text-xs font-semibold text-[#050505] px-3 uppercase tracking-wider">Back Matter</h4>
                              </div>
                              <div className="space-y-1">
                                {CHAPTER_TEMPLATES.backmatter.map((template) => (
                                  <button
                                    key={template.title}
                                    onClick={(e) => {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      handleAddChapter('backmatter', template.title === 'Custom Back Matter' ? '' : template.title);
                                      setChapterTypeDropdownOpen(false);
                                      markDirty();
                                    }}
                                    className="w-full text-left px-3 py-2 rounded-md hover:bg-[#F2F2F2] transition-colors"
                                  >
                                    <div className="text-sm font-medium text-[#15161a]">{template.title}</div>
                                  </button>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
                <p className="text-xs text-[#737373] mb-2">Click to select, drag to reorder</p>
                <div className="relative">
                  <div className="flex flex-wrap gap-2">
                    {chapters.map((ch, i) => {
                      const isSelected = selectedChapter === i;
                      const titleText = ch.title?.trim() || 'Title';
                      
                      const getChapterInfo = () => {
                        if (ch.type === 'frontmatter') {
                          return {
                            typeLabel: 'Frontmatter',
                            title: titleText && titleText !== 'Title' ? titleText : 'Title'
                          };
                        }
                        if (ch.type === 'backmatter') {
                          return {
                            typeLabel: 'Backmatter',
                            title: titleText && titleText !== 'Title' ? titleText : 'Title'
                          };
                        }
                        const contentChapterNum = getContentChapterNumber(chapters, i);
                        return {
                          typeLabel: `Chapter ${contentChapterNum}`,
                          title: titleText && titleText !== 'Title' ? titleText : 'Title'
                        };
                      };

                      const { typeLabel, title } = getChapterInfo();
                      
                      return (
                        <div
                          key={i}
                          ref={(el) => { chapterRefs.current[i] = el; }}
                          className={`flex items-center gap-2 px-3 py-1.5 rounded text-xs font-medium transition-all cursor-pointer select-none group relative ${
                            dragOverIndex === i 
                              ? 'border-2 border-dashed border-blue-400 bg-blue-50/50 scale-105 shadow-lg' 
                              : 'border-2 border-transparent'
                          } ${
                            isSelected 
                              ? "bg-[#181a1d] text-white shadow-sm" 
                              : "bg-[#F7F7F7] text-[#050505] hover:bg-[#F2F2F2]"
                          }`}
                          draggable
                          onDragStart={() => { handleDragStart(i); markDirty(); }}
                          onDragEnter={() => handleDragEnter(i)}
                          onDragEnd={handleDragEnd}
                          onClick={() => handleSelectChapter(i)}
                        >
                          <HandleDragIcon isSelected={isSelected} />
                          <div className="flex flex-col items-center gap-0 flex-1 justify-center">
                            <span className={`text-[10px] font-normal ${isSelected ? 'text-gray-300' : 'text-gray-500'}`}>
                              {typeLabel}
                            </span>
                            <span className={`text-xs font-medium ${isSelected ? 'text-white' : 'text-[#050505]'}`}>
                              {title}
                            </span>
                          </div>
                          {chapters.length > 1 && (
                            <button
                              className={`flex items-center justify-center focus:outline-none transition-all p-1 rounded ${
                                isSelected 
                                  ? "opacity-100 hover:bg-white/30" 
                                  : "opacity-70 hover:opacity-100 hover:bg-black/10"
                              }`}
                              onClick={(e) => {
                                e.stopPropagation();
                                handleRemoveChapter(i);
                                markDirty();
                              }}
                              aria-label="Delete Chapter"
                            >
                              <BinIcon 
                                className="w-4 h-4 transition"
                                stroke={isSelected ? "#ffffff" : "#050505"}
                              />
                            </button>
                          )}
                        </div>

```